{"id":"node_modules/reducers/reducer.js","dependencies":[{"name":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\package.json","includedInParent":true,"mtime":1603232443009},{"name":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\package.json","includedInParent":true,"mtime":1603232442760},{"name":"reducible/reduce","loc":{"line":3,"column":21},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\reducer.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reduce.js"},{"name":"reducible/reducible","loc":{"line":4,"column":24},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\reducer.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reducible.js"},{"name":"reducible/is-error","loc":{"line":5,"column":22},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\reducer.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\is-error.js"},{"name":"reducible/end","loc":{"line":6,"column":18},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\reducer.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\end.js"}],"generated":{"js":"\n\"use strict\";\n\nvar reduce = require(\"reducible/reduce\")\nvar reducible = require(\"reducible/reducible\")\nvar isError = require(\"reducible/is-error\")\nvar end = require(\"reducible/end\")\n\n\nfunction reducer(process) {\n  /**\n  Convenience function to simplify definitions of transformation function, to\n  avoid manual definition of `reducible` results and currying transformation\n  function. It creates typical transformation function with a following\n  signature:\n\n      transform(source, options)\n\n  From a pure data `process` function that is called on each value for a\n  collection with following arguments:\n\n    1. `options` - Options passed to the resulting transformation function\n       most commonly that's a function like in `map(source, f)`.\n    2. `next` - Function which needs to be invoked with transformed value,\n       or simply not called to skip the value.\n    3. `value` - Last value emitted by a collection being reduced.\n    4. `result` - Accumulate value.\n\n  Function is supposed to return new, accumulated `result`. It may either\n  pass mapped transformed `value` and `result` to the `next` continuation\n  or skip it.\n\n  For example see `map` and `filter` functions.\n  **/\n  return function reducer(source, options) {\n    // When return transformation function is called with a source and\n    // `options`\n    return reducible(function reduceReducer(next, initial) {\n      // When actual result is \n      reduce(source, function reduceReducerSource(value, result) {\n        // If value is `end` of source or an error just propagate through,\n        // otherwise call `process` with all the curried `options` and `next`\n        // continuation function.\n        return value === end ? next(value, result) :\n               isError(value) ? next(value, result) :\n               process(options, next, value, result)\n      })\n    })\n  }\n}\n\nmodule.exports = reducer\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/reducers/reducer.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/reducers/reducer.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}}],"sources":{"node_modules/reducers/reducer.js":"\"use strict\";\n\nvar reduce = require(\"reducible/reduce\")\nvar reducible = require(\"reducible/reducible\")\nvar isError = require(\"reducible/is-error\")\nvar end = require(\"reducible/end\")\n\n\nfunction reducer(process) {\n  /**\n  Convenience function to simplify definitions of transformation function, to\n  avoid manual definition of `reducible` results and currying transformation\n  function. It creates typical transformation function with a following\n  signature:\n\n      transform(source, options)\n\n  From a pure data `process` function that is called on each value for a\n  collection with following arguments:\n\n    1. `options` - Options passed to the resulting transformation function\n       most commonly that's a function like in `map(source, f)`.\n    2. `next` - Function which needs to be invoked with transformed value,\n       or simply not called to skip the value.\n    3. `value` - Last value emitted by a collection being reduced.\n    4. `result` - Accumulate value.\n\n  Function is supposed to return new, accumulated `result`. It may either\n  pass mapped transformed `value` and `result` to the `next` continuation\n  or skip it.\n\n  For example see `map` and `filter` functions.\n  **/\n  return function reducer(source, options) {\n    // When return transformation function is called with a source and\n    // `options`\n    return reducible(function reduceReducer(next, initial) {\n      // When actual result is \n      reduce(source, function reduceReducerSource(value, result) {\n        // If value is `end` of source or an error just propagate through,\n        // otherwise call `process` with all the curried `options` and `next`\n        // continuation function.\n        return value === end ? next(value, result) :\n               isError(value) ? next(value, result) :\n               process(options, next, value, result)\n      })\n    })\n  }\n}\n\nmodule.exports = reducer\n"},"lineCount":53}},"error":null,"hash":"41d564605d115867642a05b4cf2ede06","cacheData":{"env":{}}}