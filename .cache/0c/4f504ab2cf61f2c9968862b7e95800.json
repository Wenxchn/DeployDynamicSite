{"id":"node_modules/reducers/take-while.js","dependencies":[{"name":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\package.json","includedInParent":true,"mtime":1603232443009},{"name":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\package.json","includedInParent":true,"mtime":1603232442760},{"name":"./reducer","loc":{"line":3,"column":22},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\take-while.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\reducer.js"},{"name":"reducible/end","loc":{"line":4,"column":18},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\take-while.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\end.js"}],"generated":{"js":"\"use strict\";\n\nvar reducer = require(\"./reducer\")\nvar end = require(\"reducible/end\")\n\n\nvar takeWhile = reducer(function takeWhile(predicate, next, value, result) {\n  /**\n  Returns a sequence of successive items from `source` while `predicate(item)`\n  returns `true`. `predicate` must be free of side-effects.\n\n  ## Example\n\n  var digits = takeWhile([ 2, 7, 10, 23 ], function(x) { return x < 10 })\n  print(digits)   // => < 2 7 >\n  **/\n  return predicate(value) ? next(value, result) :\n         // Predicate returned `false` just pass `end`. Reducer will take\n         // care of returning `reduced(result)` back.\n         next(end)\n})\n\nmodule.exports = takeWhile\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/reducers/take-while.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/reducers/take-while.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}}],"sources":{"node_modules/reducers/take-while.js":"\"use strict\";\n\nvar reducer = require(\"./reducer\")\nvar end = require(\"reducible/end\")\n\n\nvar takeWhile = reducer(function takeWhile(predicate, next, value, result) {\n  /**\n  Returns a sequence of successive items from `source` while `predicate(item)`\n  returns `true`. `predicate` must be free of side-effects.\n\n  ## Example\n\n  var digits = takeWhile([ 2, 7, 10, 23 ], function(x) { return x < 10 })\n  print(digits)   // => < 2 7 >\n  **/\n  return predicate(value) ? next(value, result) :\n         // Predicate returned `false` just pass `end`. Reducer will take\n         // care of returning `reduced(result)` back.\n         next(end)\n})\n\nmodule.exports = takeWhile\n"},"lineCount":24}},"error":null,"hash":"fd8567069050f7da8ded0c7610997f9c","cacheData":{"env":{}}}