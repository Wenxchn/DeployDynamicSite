{"id":"node_modules/method/core.js","dependencies":[{"name":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\package.json","includedInParent":true,"mtime":1603232443009},{"name":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\method\\package.json","includedInParent":true,"mtime":1603232442760}],"generated":{"js":"\n\"use strict\";\n\nvar defineProperty = Object.defineProperty || function(object, name, property) {\n  object[name] = property.value\n  return object\n}\n\n// Shortcut for `Object.prototype.toString` for faster access.\nvar typefy = Object.prototype.toString\n\n// Map to for jumping from typeof(value) to associated type prefix used\n// as a hash in the map of builtin implementations.\nvar types = { \"function\": \"Object\", \"object\": \"Object\" }\n\n// Array is used to save method implementations for the host objects in order\n// to avoid extending them with non-primitive values that could cause leaks.\nvar host = []\n// Hash map is used to save method implementations for builtin types in order\n// to avoid extending their prototypes. This also allows to share method\n// implementations for types across diff contexts / frames / compartments.\nvar builtin = {}\n\nfunction Primitive() {}\nfunction ObjectType() {}\nObjectType.prototype = new Primitive()\nfunction ErrorType() {}\nErrorType.prototype = new ObjectType()\n\nvar Default = builtin.Default = Primitive.prototype\nvar Null = builtin.Null = new Primitive()\nvar Void = builtin.Void = new Primitive()\nbuiltin.String = new Primitive()\nbuiltin.Number = new Primitive()\nbuiltin.Boolean = new Primitive()\n\nbuiltin.Object = ObjectType.prototype\nbuiltin.Error = ErrorType.prototype\n\nbuiltin.EvalError = new ErrorType()\nbuiltin.InternalError = new ErrorType()\nbuiltin.RangeError = new ErrorType()\nbuiltin.ReferenceError = new ErrorType()\nbuiltin.StopIteration = new ErrorType()\nbuiltin.SyntaxError = new ErrorType()\nbuiltin.TypeError = new ErrorType()\nbuiltin.URIError = new ErrorType()\n\n\nfunction Method(id) {\n  /**\n  Private Method is a callable private name that dispatches on the first\n  arguments same named Method:\n\n      method(object, ...rest) => object[method](...rest)\n\n  It is supposed to be given **unique** `id` preferably in `\"jump@package\"`\n  like form so it won't collide with `id's` other users create. If no argument\n  is passed unique id is generated, but it's proved to be problematic with\n  npm where it's easy to end up with a copies of same module where each copy\n  will have a different name.\n\n  ## Example\n\n      var foo = Method(\"foo@awesomeness\")\n\n      // Implementation for any types\n      foo.define(function(value, arg1, arg2) {\n        // ...\n      })\n\n      // Implementation for a specific type\n      foo.define(BarType, function(bar, arg1, arg2) {\n        // ...\n      })\n  **/\n\n  // Create an internal unique name if one is not provided, also prefix it\n  // to avoid collision with regular method names.\n  var name = \"Î»:\" + String(id || Math.random().toString(32).substr(2))\n\n  function dispatch(value) {\n    // Method dispatches on type of the first argument.\n    // If first argument is `null` or `void` associated implementation is\n    // looked up in the `builtin` hash where implementations for built-ins\n    // are stored.\n    var type = null\n    var method = value === null ? Null[name] :\n                 value === void(0) ? Void[name] :\n                 // Otherwise attempt to use method with a generated private\n                 // `name` that is supposedly in the prototype chain of the\n                 // `target`.\n                 value[name] ||\n                 // Otherwise assume it's one of the built-in type instances,\n                 // in which case implementation is stored in a `builtin` hash.\n                 // Attempt to find a implementation for the given built-in\n                 // via constructor name and method name.\n                 ((type = builtin[(value.constructor || \"\").name]) &&\n                  type[name]) ||\n                 // Otherwise assume it's a host object. For host objects\n                 // actual method implementations are stored in the `host`\n                 // array and only index for the implementation is stored\n                 // in the host object's prototype chain. This avoids memory\n                 // leaks that otherwise could happen when saving JS objects\n                 // on host object.\n                 host[value[\"!\" + name]] ||\n                 // Otherwise attempt to lookup implementation for builtins by\n                 // a type of the value. This basically makes sure that all\n                 // non primitive values will delegate to an `Object`.\n                 ((type = builtin[types[typeof(value)]]) && type[name])\n\n\n    // If method implementation for the type is still not found then\n    // just fallback for default implementation.\n    method = method || Default[name]\n\n    // If implementation is still not found (which also means there is no\n    // default) just throw an error with a descriptive message.\n    if (!method) throw TypeError(\"Type does not implements method: \" + name)\n\n    // If implementation was found then just delegate.\n    return method.apply(method, arguments)\n  }\n\n  // Make `toString` of the dispatch return a private name, this enables\n  // method definition without sugar:\n  //\n  //    var method = Method()\n  //    object[method] = function() { /***/ }\n  dispatch.toString = function toString() { return name }\n\n  // Copy utility methods for convenient API.\n  dispatch.implement = implementMethod\n  dispatch.define = defineMethod\n\n  return dispatch\n}\n\n// Create method shortcuts form functions.\nvar defineMethod = function defineMethod(Type, lambda) {\n  return define(this, Type, lambda)\n}\nvar implementMethod = function implementMethod(object, lambda) {\n  return implement(this, object, lambda)\n}\n\n// Define `implement` and `define` polymorphic methods to allow definitions\n// and implementations through them.\nvar implement = Method(\"implement@method\")\nvar define = Method(\"define@method\")\n\n\nfunction _implement(method, object, lambda) {\n  /**\n  Implements `Method` for the given `object` with a provided `implementation`.\n  Calling `Method` with `object` as a first argument will dispatch on provided\n  implementation.\n  **/\n  return defineProperty(object, method.toString(), {\n    enumerable: false,\n    configurable: false,\n    writable: false,\n    value: lambda\n  })\n}\n\nfunction _define(method, Type, lambda) {\n  /**\n  Defines `Method` for the given `Type` with a provided `implementation`.\n  Calling `Method` with a first argument of this `Type` will dispatch on\n  provided `implementation`. If `Type` is a `Method` default implementation\n  is defined. If `Type` is a `null` or `undefined` `Method` is implemented\n  for that value type.\n  **/\n\n  // Attempt to guess a type via `Object.prototype.toString.call` hack.\n  var type = Type && typefy.call(Type.prototype)\n\n  // If only two arguments are passed then `Type` is actually an implementation\n  // for a default type.\n  if (!lambda) Default[method] = Type\n  // If `Type` is `null` or `void` store implementation accordingly.\n  else if (Type === null) Null[method] = lambda\n  else if (Type === void(0)) Void[method] = lambda\n  // If `type` hack indicates built-in type and type has a name us it to\n  // store a implementation into associated hash. If hash for this type does\n  // not exists yet create one.\n  else if (type !== \"[object Object]\" && Type.name) {\n    var Bulitin = builtin[Type.name] || (builtin[Type.name] = new ObjectType())\n    Bulitin[method] = lambda\n  }\n  // If `type` hack indicates an object, that may be either object or any\n  // JS defined \"Class\". If name of the constructor is `Object`, assume it's\n  // built-in `Object` and store implementation accordingly.\n  else if (Type.name === \"Object\")\n    builtin.Object[method] = lambda\n  // Host objects are pain!!! Every browser does some crazy stuff for them\n  // So far all browser seem to not implement `call` method for host object\n  // constructors. If that is a case here, assume it's a host object and\n  // store implementation in a `host` array and store `index` in the array\n  // in a `Type.prototype` itself. This avoids memory leaks that could be\n  // caused by storing JS objects on a host objects.\n  else if (Type.call === void(0)) {\n    var index = host.indexOf(lambda)\n    if (index < 0) index = host.push(lambda) - 1\n    // Prefix private name with `!` so it can be dispatched from the method\n    // without type checks.\n    implement(\"!\" + method, Type.prototype, index)\n  }\n  // If Got that far `Type` is user defined JS `Class`. Define private name\n  // as hidden property on it's prototype.\n  else\n    implement(method, Type.prototype, lambda)\n}\n\n// And provided implementations for a polymorphic equivalents.\n_define(define, _define)\n_define(implement, _implement)\n\n// Define exports on `Method` as it's only thing being exported.\nMethod.implement = implement\nMethod.define = define\nMethod.Method = Method\nMethod.method = Method\nMethod.builtin = builtin\nMethod.host = host\n\nmodule.exports = Method\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/method/core.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/method/core.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/method/core.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/method/core.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/method/core.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/method/core.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/method/core.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/method/core.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/method/core.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/method/core.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/method/core.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/method/core.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/method/core.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/method/core.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/method/core.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/method/core.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/method/core.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/method/core.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/method/core.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/method/core.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/method/core.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/method/core.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/method/core.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/method/core.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/method/core.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/method/core.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/method/core.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/method/core.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/method/core.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/method/core.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/method/core.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/method/core.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/method/core.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/method/core.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/method/core.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/method/core.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/method/core.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/method/core.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/method/core.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/method/core.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/method/core.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/method/core.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/method/core.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/method/core.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/method/core.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/method/core.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/method/core.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/method/core.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/method/core.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/method/core.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/method/core.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/method/core.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/method/core.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/method/core.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/method/core.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/method/core.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/method/core.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/method/core.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/method/core.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/method/core.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/method/core.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/method/core.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/method/core.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/method/core.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/method/core.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/method/core.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/method/core.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/method/core.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/method/core.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/method/core.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/method/core.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/method/core.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/method/core.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/method/core.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/method/core.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/method/core.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/method/core.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/method/core.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/method/core.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/method/core.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/method/core.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/method/core.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/method/core.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/method/core.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/method/core.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/method/core.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/method/core.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/method/core.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/method/core.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/method/core.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/method/core.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/method/core.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/method/core.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/method/core.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/method/core.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/method/core.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/method/core.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/method/core.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/method/core.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/method/core.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/method/core.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/method/core.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/method/core.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/method/core.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/method/core.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/method/core.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/method/core.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/method/core.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/method/core.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/method/core.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/method/core.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/method/core.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/method/core.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/method/core.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/method/core.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/method/core.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/method/core.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/method/core.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/method/core.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/method/core.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/method/core.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/method/core.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/method/core.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/method/core.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/method/core.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/method/core.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/method/core.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/method/core.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/method/core.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/method/core.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/method/core.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/method/core.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/method/core.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/method/core.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/method/core.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/method/core.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/method/core.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/method/core.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/method/core.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/method/core.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/method/core.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/method/core.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/method/core.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/method/core.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/method/core.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/method/core.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/method/core.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/method/core.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/method/core.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/method/core.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/method/core.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/method/core.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/method/core.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/method/core.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/method/core.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/method/core.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/method/core.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/method/core.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/method/core.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/method/core.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/method/core.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/method/core.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/method/core.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/method/core.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/method/core.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/method/core.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/method/core.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/method/core.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/method/core.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/method/core.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/method/core.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/method/core.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/method/core.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/method/core.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/method/core.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/method/core.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/method/core.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/method/core.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/method/core.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/method/core.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/method/core.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/method/core.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/method/core.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/method/core.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/method/core.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/method/core.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/method/core.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/method/core.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/method/core.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/method/core.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/method/core.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/method/core.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/method/core.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/method/core.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/method/core.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/method/core.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/method/core.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/method/core.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/method/core.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/method/core.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/method/core.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/method/core.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/method/core.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/method/core.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/method/core.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/method/core.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/method/core.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/method/core.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/method/core.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/method/core.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/method/core.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/method/core.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/method/core.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/method/core.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/method/core.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/method/core.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/method/core.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/method/core.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/method/core.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/method/core.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/method/core.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/method/core.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/method/core.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/method/core.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/method/core.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/method/core.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/method/core.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/method/core.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}}],"sources":{"node_modules/method/core.js":"\"use strict\";\n\nvar defineProperty = Object.defineProperty || function(object, name, property) {\n  object[name] = property.value\n  return object\n}\n\n// Shortcut for `Object.prototype.toString` for faster access.\nvar typefy = Object.prototype.toString\n\n// Map to for jumping from typeof(value) to associated type prefix used\n// as a hash in the map of builtin implementations.\nvar types = { \"function\": \"Object\", \"object\": \"Object\" }\n\n// Array is used to save method implementations for the host objects in order\n// to avoid extending them with non-primitive values that could cause leaks.\nvar host = []\n// Hash map is used to save method implementations for builtin types in order\n// to avoid extending their prototypes. This also allows to share method\n// implementations for types across diff contexts / frames / compartments.\nvar builtin = {}\n\nfunction Primitive() {}\nfunction ObjectType() {}\nObjectType.prototype = new Primitive()\nfunction ErrorType() {}\nErrorType.prototype = new ObjectType()\n\nvar Default = builtin.Default = Primitive.prototype\nvar Null = builtin.Null = new Primitive()\nvar Void = builtin.Void = new Primitive()\nbuiltin.String = new Primitive()\nbuiltin.Number = new Primitive()\nbuiltin.Boolean = new Primitive()\n\nbuiltin.Object = ObjectType.prototype\nbuiltin.Error = ErrorType.prototype\n\nbuiltin.EvalError = new ErrorType()\nbuiltin.InternalError = new ErrorType()\nbuiltin.RangeError = new ErrorType()\nbuiltin.ReferenceError = new ErrorType()\nbuiltin.StopIteration = new ErrorType()\nbuiltin.SyntaxError = new ErrorType()\nbuiltin.TypeError = new ErrorType()\nbuiltin.URIError = new ErrorType()\n\n\nfunction Method(id) {\n  /**\n  Private Method is a callable private name that dispatches on the first\n  arguments same named Method:\n\n      method(object, ...rest) => object[method](...rest)\n\n  It is supposed to be given **unique** `id` preferably in `\"jump@package\"`\n  like form so it won't collide with `id's` other users create. If no argument\n  is passed unique id is generated, but it's proved to be problematic with\n  npm where it's easy to end up with a copies of same module where each copy\n  will have a different name.\n\n  ## Example\n\n      var foo = Method(\"foo@awesomeness\")\n\n      // Implementation for any types\n      foo.define(function(value, arg1, arg2) {\n        // ...\n      })\n\n      // Implementation for a specific type\n      foo.define(BarType, function(bar, arg1, arg2) {\n        // ...\n      })\n  **/\n\n  // Create an internal unique name if one is not provided, also prefix it\n  // to avoid collision with regular method names.\n  var name = \"Î»:\" + String(id || Math.random().toString(32).substr(2))\n\n  function dispatch(value) {\n    // Method dispatches on type of the first argument.\n    // If first argument is `null` or `void` associated implementation is\n    // looked up in the `builtin` hash where implementations for built-ins\n    // are stored.\n    var type = null\n    var method = value === null ? Null[name] :\n                 value === void(0) ? Void[name] :\n                 // Otherwise attempt to use method with a generated private\n                 // `name` that is supposedly in the prototype chain of the\n                 // `target`.\n                 value[name] ||\n                 // Otherwise assume it's one of the built-in type instances,\n                 // in which case implementation is stored in a `builtin` hash.\n                 // Attempt to find a implementation for the given built-in\n                 // via constructor name and method name.\n                 ((type = builtin[(value.constructor || \"\").name]) &&\n                  type[name]) ||\n                 // Otherwise assume it's a host object. For host objects\n                 // actual method implementations are stored in the `host`\n                 // array and only index for the implementation is stored\n                 // in the host object's prototype chain. This avoids memory\n                 // leaks that otherwise could happen when saving JS objects\n                 // on host object.\n                 host[value[\"!\" + name]] ||\n                 // Otherwise attempt to lookup implementation for builtins by\n                 // a type of the value. This basically makes sure that all\n                 // non primitive values will delegate to an `Object`.\n                 ((type = builtin[types[typeof(value)]]) && type[name])\n\n\n    // If method implementation for the type is still not found then\n    // just fallback for default implementation.\n    method = method || Default[name]\n\n    // If implementation is still not found (which also means there is no\n    // default) just throw an error with a descriptive message.\n    if (!method) throw TypeError(\"Type does not implements method: \" + name)\n\n    // If implementation was found then just delegate.\n    return method.apply(method, arguments)\n  }\n\n  // Make `toString` of the dispatch return a private name, this enables\n  // method definition without sugar:\n  //\n  //    var method = Method()\n  //    object[method] = function() { /***/ }\n  dispatch.toString = function toString() { return name }\n\n  // Copy utility methods for convenient API.\n  dispatch.implement = implementMethod\n  dispatch.define = defineMethod\n\n  return dispatch\n}\n\n// Create method shortcuts form functions.\nvar defineMethod = function defineMethod(Type, lambda) {\n  return define(this, Type, lambda)\n}\nvar implementMethod = function implementMethod(object, lambda) {\n  return implement(this, object, lambda)\n}\n\n// Define `implement` and `define` polymorphic methods to allow definitions\n// and implementations through them.\nvar implement = Method(\"implement@method\")\nvar define = Method(\"define@method\")\n\n\nfunction _implement(method, object, lambda) {\n  /**\n  Implements `Method` for the given `object` with a provided `implementation`.\n  Calling `Method` with `object` as a first argument will dispatch on provided\n  implementation.\n  **/\n  return defineProperty(object, method.toString(), {\n    enumerable: false,\n    configurable: false,\n    writable: false,\n    value: lambda\n  })\n}\n\nfunction _define(method, Type, lambda) {\n  /**\n  Defines `Method` for the given `Type` with a provided `implementation`.\n  Calling `Method` with a first argument of this `Type` will dispatch on\n  provided `implementation`. If `Type` is a `Method` default implementation\n  is defined. If `Type` is a `null` or `undefined` `Method` is implemented\n  for that value type.\n  **/\n\n  // Attempt to guess a type via `Object.prototype.toString.call` hack.\n  var type = Type && typefy.call(Type.prototype)\n\n  // If only two arguments are passed then `Type` is actually an implementation\n  // for a default type.\n  if (!lambda) Default[method] = Type\n  // If `Type` is `null` or `void` store implementation accordingly.\n  else if (Type === null) Null[method] = lambda\n  else if (Type === void(0)) Void[method] = lambda\n  // If `type` hack indicates built-in type and type has a name us it to\n  // store a implementation into associated hash. If hash for this type does\n  // not exists yet create one.\n  else if (type !== \"[object Object]\" && Type.name) {\n    var Bulitin = builtin[Type.name] || (builtin[Type.name] = new ObjectType())\n    Bulitin[method] = lambda\n  }\n  // If `type` hack indicates an object, that may be either object or any\n  // JS defined \"Class\". If name of the constructor is `Object`, assume it's\n  // built-in `Object` and store implementation accordingly.\n  else if (Type.name === \"Object\")\n    builtin.Object[method] = lambda\n  // Host objects are pain!!! Every browser does some crazy stuff for them\n  // So far all browser seem to not implement `call` method for host object\n  // constructors. If that is a case here, assume it's a host object and\n  // store implementation in a `host` array and store `index` in the array\n  // in a `Type.prototype` itself. This avoids memory leaks that could be\n  // caused by storing JS objects on a host objects.\n  else if (Type.call === void(0)) {\n    var index = host.indexOf(lambda)\n    if (index < 0) index = host.push(lambda) - 1\n    // Prefix private name with `!` so it can be dispatched from the method\n    // without type checks.\n    implement(\"!\" + method, Type.prototype, index)\n  }\n  // If Got that far `Type` is user defined JS `Class`. Define private name\n  // as hidden property on it's prototype.\n  else\n    implement(method, Type.prototype, lambda)\n}\n\n// And provided implementations for a polymorphic equivalents.\n_define(define, _define)\n_define(implement, _implement)\n\n// Define exports on `Method` as it's only thing being exported.\nMethod.implement = implement\nMethod.define = define\nMethod.Method = Method\nMethod.method = Method\nMethod.builtin = builtin\nMethod.host = host\n\nmodule.exports = Method\n"},"lineCount":229}},"error":null,"hash":"f8b955d3ed19f70616fce8b21288ebb6","cacheData":{"env":{}}}