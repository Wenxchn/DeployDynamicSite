{"id":"node_modules/reducers/capture.js","dependencies":[{"name":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\package.json","includedInParent":true,"mtime":1603232443009},{"name":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\package.json","includedInParent":true,"mtime":1603232442760},{"name":"reducible/reducible","loc":{"line":3,"column":24},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\capture.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reducible.js"},{"name":"reducible/reduce","loc":{"line":4,"column":21},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\capture.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reduce.js"},{"name":"reducible/reduced","loc":{"line":5,"column":22},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\capture.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reduced.js"},{"name":"reducible/is-error","loc":{"line":6,"column":22},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\capture.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\is-error.js"}],"generated":{"js":"\"use strict\";\n\nvar reducible = require(\"reducible/reducible\")\nvar reduce = require(\"reducible/reduce\")\nvar reduced = require(\"reducible/reduced\")\nvar isError = require(\"reducible/is-error\")\n\nfunction capture(source, recover) {\n  /**\n  Creates and returns safe version of given `source` sequence, by using\n  `recover` function to recover from errors that may occur while reducing\n  a `source`. This is a mechanism for error handling and recovery for streams\n  that representing IO operations like (XHR / WebSockets etc...) where errors\n  may occur.\n  **/\n  return reducible(function reduceCapture(next, initial) {\n    var failure = void(0)\n    reduce(source, function reduceCaptureSource(value, result) {\n      // If error has already being captured then return\n      if (failure) return failure\n      // If value is an error then continue accumulation of recovered\n      // sequence.\n      else if (isError(value)) {\n        failure = reduced(result)\n        reduce(recover(value, result), next, result)\n        return failure\n      }\n      // Otherwise just forward messages.\n      else return next(value, result)\n    }, initial)\n  })\n}\n\nmodule.exports = capture\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/reducers/capture.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/reducers/capture.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}}],"sources":{"node_modules/reducers/capture.js":"\"use strict\";\n\nvar reducible = require(\"reducible/reducible\")\nvar reduce = require(\"reducible/reduce\")\nvar reduced = require(\"reducible/reduced\")\nvar isError = require(\"reducible/is-error\")\n\nfunction capture(source, recover) {\n  /**\n  Creates and returns safe version of given `source` sequence, by using\n  `recover` function to recover from errors that may occur while reducing\n  a `source`. This is a mechanism for error handling and recovery for streams\n  that representing IO operations like (XHR / WebSockets etc...) where errors\n  may occur.\n  **/\n  return reducible(function reduceCapture(next, initial) {\n    var failure = void(0)\n    reduce(source, function reduceCaptureSource(value, result) {\n      // If error has already being captured then return\n      if (failure) return failure\n      // If value is an error then continue accumulation of recovered\n      // sequence.\n      else if (isError(value)) {\n        failure = reduced(result)\n        reduce(recover(value, result), next, result)\n        return failure\n      }\n      // Otherwise just forward messages.\n      else return next(value, result)\n    }, initial)\n  })\n}\n\nmodule.exports = capture\n"},"lineCount":35}},"error":null,"hash":"ab17ff8a777eecd2f92ab474995d6b2f","cacheData":{"env":{}}}