{"id":"node_modules/reducers/drop.js","dependencies":[{"name":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\package.json","includedInParent":true,"mtime":1603232443009},{"name":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\package.json","includedInParent":true,"mtime":1603232442760},{"name":"reducible/reducible","loc":{"line":3,"column":24},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\drop.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reducible.js"},{"name":"reducible/reduce","loc":{"line":4,"column":21},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\drop.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reduce.js"},{"name":"reducible/is-error","loc":{"line":5,"column":22},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\drop.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\is-error.js"},{"name":"reducible/end","loc":{"line":6,"column":18},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducers\\drop.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\end.js"}],"generated":{"js":"\"use strict\";\n\nvar reducible = require(\"reducible/reducible\")\nvar reduce = require(\"reducible/reduce\")\nvar isError = require(\"reducible/is-error\")\nvar end = require(\"reducible/end\")\n\nfunction drop(source, n) {\n  /**\n  Returns sequence of all `source`'s items after `n`-th one. If source contains\n  less then `n` items empty sequence is returned.\n\n  ## Example\n\n  print(drop([ 1, 2, 3, 4 ], 2))  // => <stream 3 4 />\n  print(drop([ 1, 2, 3 ], 5))     // => <stream />\n  **/\n\n  // If drop `<= 0` then optimize by returning source itself. If `Infinity`\n  // return empty.\n  if (n <= 0) return source\n  if (n === Infinity) return void(0)\n  return reducible(function reduceDrop(next, initial) {\n    var count = n\n    reduce(source, function reduceDropSource(value, result) {\n      // If value is end of collection or is an error (which also includes\n      // end of collection) just pass it through, `reducible` will take care\n      // of everything.\n      if (value === end) return next(value, result)\n      if (isError(value)) return next(value, result)\n      // If count of items has reached `0` just keep on passing values.\n      if (count === 0) return next(value, result)\n      // Otherwise just decrement count and return `result`.\n      count = count - 1\n      return result\n    }, initial)\n  })\n}\n\nmodule.exports = drop\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/reducers/drop.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/reducers/drop.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}}],"sources":{"node_modules/reducers/drop.js":"\"use strict\";\n\nvar reducible = require(\"reducible/reducible\")\nvar reduce = require(\"reducible/reduce\")\nvar isError = require(\"reducible/is-error\")\nvar end = require(\"reducible/end\")\n\nfunction drop(source, n) {\n  /**\n  Returns sequence of all `source`'s items after `n`-th one. If source contains\n  less then `n` items empty sequence is returned.\n\n  ## Example\n\n  print(drop([ 1, 2, 3, 4 ], 2))  // => <stream 3 4 />\n  print(drop([ 1, 2, 3 ], 5))     // => <stream />\n  **/\n\n  // If drop `<= 0` then optimize by returning source itself. If `Infinity`\n  // return empty.\n  if (n <= 0) return source\n  if (n === Infinity) return void(0)\n  return reducible(function reduceDrop(next, initial) {\n    var count = n\n    reduce(source, function reduceDropSource(value, result) {\n      // If value is end of collection or is an error (which also includes\n      // end of collection) just pass it through, `reducible` will take care\n      // of everything.\n      if (value === end) return next(value, result)\n      if (isError(value)) return next(value, result)\n      // If count of items has reached `0` just keep on passing values.\n      if (count === 0) return next(value, result)\n      // Otherwise just decrement count and return `result`.\n      count = count - 1\n      return result\n    }, initial)\n  })\n}\n\nmodule.exports = drop\n"},"lineCount":41}},"error":null,"hash":"1be372ad49705748ac05b1280832806f","cacheData":{"env":{}}}