{"id":"node_modules/reducible/reducible.js","dependencies":[{"name":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\package.json","includedInParent":true,"mtime":1603232443009},{"name":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\package.json","includedInParent":true,"mtime":1603232442761},{"name":"./reduce","loc":{"line":3,"column":21},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reducible.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reduce.js"},{"name":"./end","loc":{"line":4,"column":18},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reducible.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\end.js"},{"name":"./is-error","loc":{"line":5,"column":22},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reducible.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\is-error.js"},{"name":"./is-reduced","loc":{"line":6,"column":24},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reducible.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\is-reduced.js"},{"name":"./reduced","loc":{"line":7,"column":22},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reducible.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reduced.js"}],"generated":{"js":"\"use strict\";\n\nvar reduce = require(\"./reduce\")\nvar end = require(\"./end\")\nvar isError = require(\"./is-error\")\nvar isReduced = require(\"./is-reduced\")\nvar reduced = require(\"./reduced\")\n\nfunction Reducible(reduce) {\n  /**\n  Reducible is a type of the data-structure that represents something\n  that can be reduced. Most of the time it's used to represent transformation\n  over other reducible by capturing it in a lexical scope.\n\n  Reducible has an attribute `reduce` pointing to a function that does\n  reduction.\n  **/\n\n  // JS engines optimize access to properties that are set in the constructor's\n  // so we set it here.\n  this.reduce = reduce\n}\n\n// Implementation of `accumulate` for reducible, which just delegates to it's\n// `reduce` attribute.\nreduce.define(Reducible, function reduceReducible(reducible, next, initial) {\n  var result\n  // State is intentionally accumulated in the outer variable, that way no\n  // matter if consumer is broken and passes in wrong accumulated state back\n  // this reducible will still accumulate result as intended.\n  var state = initial\n  try {\n    reducible.reduce(function forward(value) {\n      try {\n        // If reduction has already being completed return is set to\n        // an accumulated state boxed via `reduced`. It's set to state\n        // that is return to signal input that reduction is complete.\n        if (result) state = result\n        // if dispatched `value` is is special `end` of input one or an error\n        // just forward to reducer and store last state boxed as `reduced` into\n        // state. Later it will be assigned to result and returned to input\n        // to indicate end of reduction.\n        else if (value === end || isError(value)) {\n          next(value, state)\n          state = reduced(state)\n        }\n        // if non of above just accumulate new state by passing value and\n        // previously accumulate state to reducer.\n        else state = next(value, state)\n\n        // If state is boxed with `reduced` then accumulation is complete.\n        // Indicated explicitly by a reducer or by end / error of the input.\n        // Either way store it to the result in case broken input attempts to\n        // call forward again.\n        if (isReduced(state)) result = state\n\n        // return accumulated state back either way.\n        return state\n      }\n      // If error is thrown then forward it to the reducer such that consumer\n      // can apply recovery logic. Also store current `state` boxed with\n      // `reduced` to signal input that reduction is complete.\n      catch (error) {\n        next(error, state)\n        result = reduced(state)\n        return result\n      }\n    })\n  }\n  // It could be that attempt to reduce underlaying reducible throws, if that\n  // is the case still forward an `error` to a reducer and store reduced state\n  // into result, in case process of reduction started before exception and\n  // forward will still be called. Return result either way to signal\n  // completion.\n  catch(error) {\n    next(error, state)\n    result = reduced(state)\n    return result\n  }\n})\n\nfunction reducible(reduce) {\n  return new Reducible(reduce)\n}\nreducible.type = Reducible\n\nmodule.exports = reducible\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/reducible/reducible.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/reducible/reducible.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}}],"sources":{"node_modules/reducible/reducible.js":"\"use strict\";\n\nvar reduce = require(\"./reduce\")\nvar end = require(\"./end\")\nvar isError = require(\"./is-error\")\nvar isReduced = require(\"./is-reduced\")\nvar reduced = require(\"./reduced\")\n\nfunction Reducible(reduce) {\n  /**\n  Reducible is a type of the data-structure that represents something\n  that can be reduced. Most of the time it's used to represent transformation\n  over other reducible by capturing it in a lexical scope.\n\n  Reducible has an attribute `reduce` pointing to a function that does\n  reduction.\n  **/\n\n  // JS engines optimize access to properties that are set in the constructor's\n  // so we set it here.\n  this.reduce = reduce\n}\n\n// Implementation of `accumulate` for reducible, which just delegates to it's\n// `reduce` attribute.\nreduce.define(Reducible, function reduceReducible(reducible, next, initial) {\n  var result\n  // State is intentionally accumulated in the outer variable, that way no\n  // matter if consumer is broken and passes in wrong accumulated state back\n  // this reducible will still accumulate result as intended.\n  var state = initial\n  try {\n    reducible.reduce(function forward(value) {\n      try {\n        // If reduction has already being completed return is set to\n        // an accumulated state boxed via `reduced`. It's set to state\n        // that is return to signal input that reduction is complete.\n        if (result) state = result\n        // if dispatched `value` is is special `end` of input one or an error\n        // just forward to reducer and store last state boxed as `reduced` into\n        // state. Later it will be assigned to result and returned to input\n        // to indicate end of reduction.\n        else if (value === end || isError(value)) {\n          next(value, state)\n          state = reduced(state)\n        }\n        // if non of above just accumulate new state by passing value and\n        // previously accumulate state to reducer.\n        else state = next(value, state)\n\n        // If state is boxed with `reduced` then accumulation is complete.\n        // Indicated explicitly by a reducer or by end / error of the input.\n        // Either way store it to the result in case broken input attempts to\n        // call forward again.\n        if (isReduced(state)) result = state\n\n        // return accumulated state back either way.\n        return state\n      }\n      // If error is thrown then forward it to the reducer such that consumer\n      // can apply recovery logic. Also store current `state` boxed with\n      // `reduced` to signal input that reduction is complete.\n      catch (error) {\n        next(error, state)\n        result = reduced(state)\n        return result\n      }\n    })\n  }\n  // It could be that attempt to reduce underlaying reducible throws, if that\n  // is the case still forward an `error` to a reducer and store reduced state\n  // into result, in case process of reduction started before exception and\n  // forward will still be called. Return result either way to signal\n  // completion.\n  catch(error) {\n    next(error, state)\n    result = reduced(state)\n    return result\n  }\n})\n\nfunction reducible(reduce) {\n  return new Reducible(reduce)\n}\nreducible.type = Reducible\n\nmodule.exports = reducible\n"},"lineCount":88}},"error":null,"hash":"28120604e30567112f5800e6c121f611","cacheData":{"env":{}}}