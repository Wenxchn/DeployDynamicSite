{"id":"node_modules/reducible/reduce.js","dependencies":[{"name":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\package.json","includedInParent":true,"mtime":1603232443009},{"name":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\package.json","includedInParent":true,"mtime":1603232442761},{"name":"method","loc":{"line":3,"column":21},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reduce.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\method\\core.js"},{"name":"./is-reduced","loc":{"line":5,"column":24},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reduce.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\is-reduced.js"},{"name":"./is-error","loc":{"line":6,"column":22},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reduce.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\is-error.js"},{"name":"./end","loc":{"line":7,"column":18},"parent":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\reduce.js","resolved":"C:\\Users\\wenxc\\Desktop\\DynamicSite\\node_modules\\reducible\\end.js"}],"generated":{"js":"\"use strict\";\n\nvar method = require(\"method\")\n\nvar isReduced = require(\"./is-reduced\")\nvar isError = require(\"./is-error\")\nvar end = require(\"./end\")\n\nvar reduce = method(\"reduce@reducible\")\n\n// Implementation of `reduce` for the empty collections, that immediately\n// signals reducer that it's ended.\nreduce.empty = function reduceEmpty(empty, next, initial) {\n  next(end, initial)\n}\n\n// Implementation of `reduce` for the singular values which are treated\n// as collections with a single element. Yields a value and signals the end.\nreduce.singular = function reduceSingular(value, next, initial) {\n  next(end, next(value, initial))\n}\n\n// Implementation of `reduce` for the array (and alike) values, such that it\n// will call accumulator function `next` each time with next item and\n// accumulated state until it's exhausted or `next` returns marked value\n// indicating that it's reduced. Either way signals `end` to an accumulator.\nreduce.indexed = function reduceIndexed(indexed, next, initial) {\n  var state = initial\n  var index = 0\n  var count = indexed.length\n  while (index < count) {\n    var value = indexed[index]\n    state = next(value, state)\n    index = index + 1\n    if (value === end) return end\n    if (isError(value)) return state\n    if (isReduced(state)) return state.value\n  }\n  next(end, state)\n}\n\n// Both `undefined` and `null` implement accumulate for empty sequences.\nreduce.define(void(0), reduce.empty)\nreduce.define(null, reduce.empty)\n\n// Array and arguments implement accumulate for indexed sequences.\nreduce.define(Array, reduce.indexed)\n\nfunction Arguments() { return arguments }\nArguments.prototype = Arguments()\nreduce.define(Arguments, reduce.indexed)\n\n// All other built-in data types are treated as single value collections\n// by default. Of course individual types may choose to override that.\nreduce.define(reduce.singular)\n\n// Errors just yield that error.\nreduce.define(Error, function(error, next) { next(error) })\nmodule.exports = reduce\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/reducible/reduce.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/reducible/reduce.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}}],"sources":{"node_modules/reducible/reduce.js":"\"use strict\";\n\nvar method = require(\"method\")\n\nvar isReduced = require(\"./is-reduced\")\nvar isError = require(\"./is-error\")\nvar end = require(\"./end\")\n\nvar reduce = method(\"reduce@reducible\")\n\n// Implementation of `reduce` for the empty collections, that immediately\n// signals reducer that it's ended.\nreduce.empty = function reduceEmpty(empty, next, initial) {\n  next(end, initial)\n}\n\n// Implementation of `reduce` for the singular values which are treated\n// as collections with a single element. Yields a value and signals the end.\nreduce.singular = function reduceSingular(value, next, initial) {\n  next(end, next(value, initial))\n}\n\n// Implementation of `reduce` for the array (and alike) values, such that it\n// will call accumulator function `next` each time with next item and\n// accumulated state until it's exhausted or `next` returns marked value\n// indicating that it's reduced. Either way signals `end` to an accumulator.\nreduce.indexed = function reduceIndexed(indexed, next, initial) {\n  var state = initial\n  var index = 0\n  var count = indexed.length\n  while (index < count) {\n    var value = indexed[index]\n    state = next(value, state)\n    index = index + 1\n    if (value === end) return end\n    if (isError(value)) return state\n    if (isReduced(state)) return state.value\n  }\n  next(end, state)\n}\n\n// Both `undefined` and `null` implement accumulate for empty sequences.\nreduce.define(void(0), reduce.empty)\nreduce.define(null, reduce.empty)\n\n// Array and arguments implement accumulate for indexed sequences.\nreduce.define(Array, reduce.indexed)\n\nfunction Arguments() { return arguments }\nArguments.prototype = Arguments()\nreduce.define(Arguments, reduce.indexed)\n\n// All other built-in data types are treated as single value collections\n// by default. Of course individual types may choose to override that.\nreduce.define(reduce.singular)\n\n// Errors just yield that error.\nreduce.define(Error, function(error, next) { next(error) })\nmodule.exports = reduce\n"},"lineCount":60}},"error":null,"hash":"8136cbb1a69f1865206b546b7986039d","cacheData":{"env":{}}}